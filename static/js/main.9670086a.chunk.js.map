{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","pattern","onChange","useState","Math","random","toString","slice","id","touched","setToched","testNoValue","val","hasRequiredError","testIncorrectPattern","test","hasPatternError","htmlFor","classNames","type","placeholder","event","currentValue","target","onBlur","emptyMovie","NewMovie","props","onAdd","setMovie","errors","setErrors","handleChange","error","prevMovie","prevErrors","onSubmit","preventDefault","disabled","Object","values","some","App","moviesFromServer","setMovies","count","setCount","prevMovies","prevCount","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9670086a.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  pattern?: RegExp,\n  onChange?: (name: string, newValue: string, hasError: boolean) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  pattern = /.*/,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n\n  const testNoValue = (val: string) => required && !val;\n  const hasRequiredError = touched && testNoValue(value);\n\n  const testIncorrectPattern = (val: string) => !(pattern.test(val));\n  const hasPatternError = touched && testIncorrectPattern(value);\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasRequiredError || hasPatternError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => {\n            const currentValue = event.target.value;\n\n            onChange(\n              name,\n              currentValue,\n              testNoValue(currentValue) || testIncorrectPattern(currentValue),\n            );\n          }}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasRequiredError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n      {!hasRequiredError && hasPatternError && (\n        <p className=\"help is-danger\">{`${label} is incorrect`}</p>\n      )}\n    </div>\n  );\n};\n","import { FormEvent, useState } from 'react';\nimport { TextField } from '../TextField';\n\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (newMovie: Movie) => void;\n};\n\nconst emptyMovie: Movie = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\nexport const NewMovie: React.FC<Props> = (props) => {\n  const { onAdd } = props;\n  const [movie, setMovie] = useState(emptyMovie);\n  const [errors, setErrors] = useState({\n    title: true,\n    description: false,\n    imgUrl: true,\n    imdbUrl: true,\n    imdbId: true,\n  });\n  // eslint-disable-next-line max-len\n  const pattern = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/;\n\n  const handleChange = (name: string, value: string, error: boolean): void => {\n    setMovie(prevMovie => ({\n      ...prevMovie,\n      [name]: value,\n    }));\n    setErrors(prevErrors => ({\n      ...prevErrors,\n      [name]: error,\n    }));\n  };\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    onAdd(movie);\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={movie.title}\n        onChange={handleChange}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={movie.description}\n        onChange={handleChange}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={movie.imgUrl}\n        onChange={handleChange}\n        pattern={pattern}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={movie.imdbUrl}\n        onChange={handleChange}\n        pattern={pattern}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={movie.imdbId}\n        onChange={handleChange}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={Object.values(errors).some(error => error)}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\n\nimport { Movie } from './types/Movie';\n\nimport './App.scss';\n\nimport moviesFromServer from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n  const [count, setCount] = useState(0);\n\n  const handleAdd = (movie: Movie) => {\n    setMovies(prevMovies => ([\n      ...prevMovies,\n      movie,\n    ]));\n    setCount(prevCount => prevCount + 1);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={handleAdd} key={count} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}